name: Security Scan and Docker Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  checkout:
    name: Checkout Code
    runs-on: self-hosted
    outputs:
      sha: ${{ steps.get_sha.outputs.sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Save commit SHA
        id: get_sha
        run: echo "sha=${{ github.sha }}" >> "$GITHUB_OUTPUT"

  setup_node:
    name: Install Dependencies
    runs-on: self-hosted
    needs: checkout
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm install

  trufflehog_scan:
    name: TruffleHog Secret Scan
    runs-on: self-hosted
    needs: checkout
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run TruffleHog Scan
        run: |
          trufflehog filesystem . \
            --exclude-paths trufflehog-excluded-paths.txt \
            --no-update --fail \
            --json > trufflehog-report.json
          cat trufflehog-report.json

      - name: Upload TruffleHog Report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-report
          path: trufflehog-report.json

  retirejs_scan:
    name: Retire.js SCA Scan
    runs-on: self-hosted
    needs: checkout
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm install

      - name: Run Retire.js Scan
        run: |
          npx retire --outputformat json --outputpath retire-scan-report.json
          cat retire-scan-report.json

      - name: Upload Retire.js Report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: retirejs-report
          path: retire-scan-report.json

  trivy_dockerfile_scan:
    name: Trivy Dockerfile Misconfiguration Scan
    runs-on: self-hosted
    needs: checkout
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Dockerfile Misconfig Scan
        run: |
          trivy config Dockerfile --exit-code=1 --format json > trivy-scan-dockerfile-report.json
          cat trivy-scan-dockerfile-report.json

      - name: Upload Trivy Dockerfile Report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-dockerfile-report
          path: trivy-scan-dockerfile-report.json

  snyk_scan:
    name: Snyk SCA Scan
    runs-on: self-hosted
    needs: checkout
    continue-on-error: true
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm install

      - name: Run Snyk SCA Scan
        run: |
          snyk test --json > snyk-scan-report.json
          cat snyk-scan-report.json

      - name: Upload Snyk Report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: snyk-scan-report
          path: snyk-scan-report.json

  docker_build:
    name: Build & Push Docker Image
    runs-on: self-hosted
    needs: [setup_node]
    env:
      DEPLOY_USERNAME: ubuntu
      DEPLOYMENT_IP: 192.168.1.12
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t xenjutsu/nodejsgoof:latest .

      - name: Push Docker Image
        run: docker push xenjutsu/nodejsgoof:latest
        
  deploy:
    name: Deploy Docker Image via SSH
    runs-on: self-hosted
    needs: docker_build
    env:
      DEPLOY_USERNAME: ubuntu
      DEPLOYMENT_IP: 192.168.0.12
      DOCKERHUB_CREDENTIALS_USR: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_CREDENTIALS_PSW: ${{ secrets.DOCKERHUB_PASSWORD }}
    steps:
      - name: Write SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Deploy via SSH
        env:
          DOCKERHUB_CREDENTIALS_USR: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_CREDENTIALS_PSW: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $DEPLOY_USERNAME@$DEPLOYMENT_IP \
            'echo "$DOCKERHUB_CREDENTIALS_PSW" | docker login -u "$DOCKERHUB_CREDENTIALS_USR" --password-stdin && \
             docker pull xenjutsu/nodejsgoof:latest && \
             docker rm --force mongodb && \
             docker run --detach --name mongodb -p 27017:27017 mongo:3 && \
             docker rm --force nodejsgoof && \
             docker run -it --detach --name nodejsgoof --network host xenjutsu/nodejsgoof:latest'
