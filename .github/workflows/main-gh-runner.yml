name: Security Scan and Docker Build

#on:
#  pull_request:
#    branches:
#      - main

jobs:
  checkout:
    name: Checkout Code
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.get_sha.outputs.sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Save commit SHA
        id: get_sha
        run: echo "sha=${{ github.sha }}" >> "$GITHUB_OUTPUT"

  trufflehog_scan:
    name: Run TruffleHog Scan
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run TruffleHog
        id: trufflehog
        run: |
          docker run --rm -v ${{ github.workspace }}:/src trufflesecurity/trufflehog:latest \
            filesystem /src --exclude-paths /src/trufflehog-excluded-paths.txt --fail --json \
            | tee trufflehog-scan-result.json

          if [ "$(jq 'length' trufflehog-scan-result.json)" -gt 0 ]; then
            echo "found_secrets=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "found_secrets=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Upload TruffleHog Result
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results
          path: trufflehog-scan-result.json

      - name: Set GitHub Status for TruffleHog Scan
        if: always()
        run: |
          if [ "${{ steps.trufflehog.outputs.found_secrets }}" = "true" ]; then
            state="failure"
            description="TruffleHog found secrets!"
          else
            state="success"
            description="TruffleHog scan passed"
          fi

          json=$(printf '{"state":"%s","context":"trufflehog-scan","description":"%s"}' "$state" "$description")

          curl -s -X POST \
            -H "Authorization: token ${{ secrets.STATUS_CHECK_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -d "$json"

  setup_node:
    name: Setup Node.js & Install Dependencies
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Dependencies
        run: npm install

  retirejs_scan:
    name: Retire.js Scan
    runs-on: ubuntu-latest
    needs: setup_node
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Retire.js
        run: npm install retire

      - name: Run Retire.js
        id: retirejs
        run: |
          ./node_modules/retire/lib/cli.js --outputformat json --outputpath retire-scan-report.json || true
          if [ "$(jq '.data | length' retire-scan-report.json)" -gt 0 ]; then
            echo "found_vulns=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "found_vulns=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Show Retire.js Report
        run: cat retire-scan-report.json

      - name: Upload Retire.js Report
        uses: actions/upload-artifact@v4
        with:
          name: retire-scan-report
          path: retire-scan-report.json

      - name: Set GitHub Status for Retire.js Scan
        if: always()
        run: |
          if [ "${{ steps.retirejs.outputs.found_vulns }}" = "true" ]; then
            state="failure"
            description="Retire.js found vulnerabilities!"
          else
            state="success"
            description="Retire.js scan passed"
          fi

          json=$(printf '{"state":"%s","context":"retirejs-scan","description":"%s"}' "$state" "$description")

          curl -s -X POST \
            -H "Authorization: token ${{ secrets.STATUS_CHECK_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -d "$json"

  trivy_dockerfile_scan:
    name: Trivy Dockerfile Scan
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Config Scan
        id: trivy
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/project \
            aquasec/trivy:latest config /project/Dockerfile --format json --exit-code 1 > trivy-scan-dockerfile-report.json || true

          failures=$(jq '[.Results[].MisconfSummary.Failures] | add' trivy-scan-dockerfile-report.json)
          echo "failures=$failures" >> $GITHUB_OUTPUT

      - name: Show Trivy Dockerfile Report
        run: cat trivy-scan-dockerfile-report.json

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-dockerfile-report
          path: trivy-scan-dockerfile-report.json

      - name: Set GitHub Status for Trivy Dockerfile Scan
        if: always()
        run: |
          if [ "${{ steps.trivy.outputs.failures }}" -gt 0 ]; then
            state="failure"
            description="Trivy found Dockerfile misconfigurations!"
          else
            state="success"
            description="Trivy Dockerfile scan passed"
          fi

          json=$(printf '{"state":"%s","context":"trivy-dockerfile-scan","description":"%s"}' "$state" "$description")

          curl -s -X POST \
            -H "Authorization: token ${{ secrets.STATUS_CHECK_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -d "$json"

  docker_build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [setup_node, trufflehog_scan, retirejs_scan, trivy_dockerfile_scan]
    env:
      DEPLOY_USERNAME: ubuntu
      DEPLOYMENT_IP: 192.168.1.11
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t xenjutsu/nodejsgoof:latest .

      - name: Push Docker Image
        run: docker push xenjutsu/nodejsgoof:latest
